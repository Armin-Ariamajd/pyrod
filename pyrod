""" PyRod - dynamic molecular interaction fields (dMIFs), based on tracing water molecules in MD simulations.

This is the main script to run PyRod from the command line for analyzing molecular dynamics simulations and generating
dMIFs and pharmacophores.
"""

# python standard libraries
import argparse
import configparser
import logging
import multiprocessing
import os
import pickle
import sys
import time

# pyrod modules
try:
    from pyrod.modules.dmif import dmif
    from pyrod.modules.lookup import logo, __version__, help_description, feature_names
    from pyrod.modules.pharmacophore import exclusion_volume_generator, features_generator, library_generator
    from pyrod.modules.helper_config import main_parameters, grid_parameters, dmif_parameters, \
        exclusion_volume_parameters, feature_parameters, pharmacophore_parameters, library_parameters
    from pyrod.modules.helper_dmif import grid_generator, dmif_data_structure, dmif_processing
    from pyrod.modules.helper_pharmacophore import features_processing, select_features
    from pyrod.modules.helper_update import update_user, time_to_text
    from pyrod.modules.helper_write import file_path, pdb_writer, dmif_writer, pharmacophore_writer, pickle_writer, \
        setup_logger
except ImportError:
    from modules.dmif import dmif
    from modules.lookup import logo, __version__, help_description, feature_names
    from modules.pharmacophore import exclusion_volume_generator, features_generator, library_generator
    from modules.helper_config import main_parameters, grid_parameters, dmif_parameters, exclusion_volume_parameters, \
        feature_parameters, pharmacophore_parameters, library_parameters
    from modules.helper_dmif import grid_generator, dmif_data_structure, dmif_processing
    from modules.helper_pharmacophore import features_processing, select_features
    from modules.helper_update import update_user, time_to_text
    from modules.helper_write import file_path, pdb_writer, dmif_writer, pharmacophore_writer, pickle_writer, \
        setup_logger


if __name__ == '__main__':
    start_time = time.time()
    parser = argparse.ArgumentParser(prog='PyRod', description=help_description)
    parser.add_argument('conf', help='path to configuration file')
    parser.add_argument('--verbose', dest='debugging', action='store_true', help='verbose logging for debugging')
    conf = parser.parse_args().conf
    debugging = parser.parse_args().debugging
    config = configparser.ConfigParser()
    config.read(conf)
    directory = config.get('directory', 'directory')
    if len(directory) == 0:
        directory = os.getcwd() + '/pyrod'
    logger = setup_logger('main', directory, debugging)
    update_user('\n'.join(logo), logger)
    logger.debug('\n'.join([': '.join(list(_)) for _ in config.items('directory')]))
    test_grid_generation, dmif_generation, exclusion_volume_generation, feature_generation, pharmacophore_generation, \
        library_generation = main_parameters(config)
    # defining grid
    if test_grid_generation:
        logger.debug('\n'.join([': '.join(list(_)) for _ in config.items('grid parameters')]))
        center, edge_lengths, space, name = grid_parameters(config)
        grid = grid_generator(center, edge_lengths, space)
        pdb_writer(positions=grid, name=name, path=''.join([directory, '/test']))
        update_user('Writing test grid to {}/test.'.format(directory), logger)
        sys.exit()
    # generating dmifs
    if dmif_generation:
        logger.debug('\n'.join([': '.join(list(_)) for _ in config.items('grid parameters')]))
        logger.debug('\n'.join([': '.join(list(_)) for _ in config.items('dmif parameters')]))
        center, edge_lengths, space = grid_parameters(config)[:-1]
        topology, trajectories, traj_number, first_frame, last_frame, length, water_name, metal_names, map_formats, \
            mp = dmif_parameters(config)
        update_user('Initializing grid.', logger)
        grid_score, grid_partners = dmif_data_structure(grid_generator(center, edge_lengths, space))
        args = [(topology, trajectory, counter, length, mp, traj_number, grid_score, grid_partners, first_frame,
                 last_frame, water_name, metal_names, directory, debugging) for counter, trajectory in
                enumerate(trajectories)]
        if traj_number > 1:
            update_user('Analyzing {} trajectories.'.format(traj_number), logger)
        else:
            update_user('Analyzing 1 trajectory.', logger)
        p = multiprocessing.Pool(processes=mp)
        results = p.starmap(dmif, args, chunksize=1)
        p.close()
        p.join()
        update_user('Processing results.', logger)
        dmif, partners = dmif_processing(results, traj_number, length)
        del results
        pickle_writer(dmif, 'dmif', '/'.join([directory, 'data']), logger)
        pickle_writer(partners, 'partners', '/'.join([directory, 'data']), logger)
        update_user('Writing maps to {}/dmifs.'.format(directory), logger)
        for map_format in map_formats:
            for feature_name in [x for x in dmif.dtype.names if x not in ['x', 'y', 'z']]:
                dmif_writer(dmif, feature_name, file_format=map_format, name=feature_name,
                            directory='/'.join([directory, 'dmifs']))
    # generating exclusion volumes
    if exclusion_volume_generation:
        logger.debug('\n'.join([': '.join(list(_)) for _ in config.items('exclusion volume parameters')]))
        if len(config.get('exclusion volume parameters', 'dmif')) > 0:
            update_user('Loading dmif from {}.'.format(config.get('exclusion volume parameters', 'dmif')), logger)
            dmif = pickle.load(open(config.get('exclusion volume parameters', 'dmif'), 'rb'))
        ev_space, shape_min_cutoff, shape_max_cutoff, shape_radius, ev_radius = exclusion_volume_parameters(config)
        evs = exclusion_volume_generator(dmif, directory, debugging, shape_min_cutoff, shape_max_cutoff, shape_radius,
                                         ev_radius, ev_space)
        pickle_writer(evs, 'exclusion_volumes', '/'.join([directory, 'data']), logger)
    # generating features
    if feature_generation:
        logger.debug('\n'.join([': '.join(list(_)) for _ in config.items('feature parameters')]))
        if len(config.get('feature parameters', 'dmif')) > 0:
            update_user('Loading dmif from {}.'.format(config.get('feature parameters', 'dmif')), logger)
            dmif = pickle.load(open(config.get('feature parameters', 'dmif'), 'rb'))
        if len(config.get('feature parameters', 'partners')) > 0:
            update_user('Loading partner from {}.'.format(config.get('feature parameters', 'partners')), logger)
            partners = pickle.load(open(config.get('feature parameters', 'partners'), 'rb'))
        features_per_feature_type, mp = feature_parameters(config)
        args = [(dmif, partners, feature_name, features_per_feature_type, directory, debugging) for feature_name in
                feature_names]
        update_user('Generating features.', logger)
        p = multiprocessing.Pool(processes=mp)
        results = p.starmap(features_generator, args, chunksize=1)
        p.close()
        p.join()
        features = features_processing(results, features_per_feature_type)
        pickle_writer(features, 'features', '/'.join([directory, 'data']), logger)
    # pharmacophore generation
    if pharmacophore_generation:
        logger.debug('\n'.join([': '.join(list(_)) for _ in config.items('pharmacophore parameters')]))
        if len(config.get('pharmacophore parameters', 'features')) > 0:
            update_user('Loading features from {}.'.format(config.get('pharmacophore parameters', 'features')), logger)
            features = pickle.load(open(config.get('pharmacophore parameters', 'features'), 'rb'))
        if len(config.get('pharmacophore parameters', 'exclusion volumes')) > 0:
            update_user('Loading exclusion volumes from {}.'.format(config.get('pharmacophore parameters',
                                                                               'exclusion volumes')), logger)
            evs = pickle.load(open(config.get('pharmacophore parameters', 'exclusion volumes'), 'rb'))
        pharmacophore_formats, weight, all_features, best_features, best_name, hbs_number, his_number, iis_number, \
            ais_number = pharmacophore_parameters(config)
        pharmacophore_directory = '/'.join([directory, 'pharmacophores'])
        for pharmacophore_format in pharmacophore_formats:
            if all_features:
                update_user('Writing {} pharmacophore with all features to {}.'.format(pharmacophore_format,
                                                                                       pharmacophore_directory), logger)
                pharmacophore_writer(features + evs, pharmacophore_format, 'all', pharmacophore_directory, weight)
            if best_features:
                selected_features = select_features(features, hbs_number, his_number, iis_number, ais_number)
                update_user('Writing {} pharmacophore with {} features to {}.'.format(pharmacophore_format,
                                                                                      len(selected_features),
                                                                                      pharmacophore_directory), logger)
                pharmacophore_writer(selected_features + evs, pharmacophore_format, best_name, pharmacophore_directory,
                                     weight)
    # library generation
    if library_generation:
        logger.debug('\n'.join([': '.join(list(_)) for _ in config.items('library parameters')]))
        library_generator(*library_parameters(config, directory))
    update_user('Finished after {}.'.format(time_to_text(time.time() - start_time)), logger)
